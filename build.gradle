buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url = "https://repo1.maven.org/maven2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'forge'
compileJava.options.encoding = 'UTF-8'
sourceCompatibility = version_java
targetCompatibility = version_java

ext.version_mod = "${version_mod_major}.${version_mod_minor}-${version_mod_revis}"
version = ext.version_mod
//version = "${version_minecraft}-${version_mod}"
configurations {
    compile.extendsFrom exportedCompile
}

group= "com.hbm" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "hbm"

minecraft {
    version = "${version_minecraft}-${version_forge}-${version_minecraft}"
    runDir = "eclipse"
	replaceIn "lib/RefStrings.java"
	replace "@MINECRAFT@", version_minecraft
    replace "@MAJOR@", version_mod_major
    replace "@MINOR@", version_mod_minor
    replace "@REVIS@", version_mod_revis
}

// configure  the source folders
sourceSets {

    api {
		java {
			srcDir 'api'
		}
    }
}

repositories {
    maven {
        name 'Forge' // Applied Energistics
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name = "ic2, forestry"
        url = "http://maven.ic2.player.to/"
    }
    maven { // AppleCore
        url "http://www.ryanliptak.com/maven/"
    }
    maven { //EnderIO
         name = "tterrag"
         url = "http://maven.tterrag.com/"
    }
    maven { // WAILA
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { // OpenComputers
        name "OpenComputers"
        url "http://maven.cil.li"
    }
}

dependencies {

	compile "codechicken:CodeChickenLib:${version_minecraft}-${version_codeChickenLib}:dev"
    compile "codechicken:CodeChickenCore:${version_minecraft}-${version_codeChickenCore}:dev"
    compile "codechicken:NotEnoughItems:${version_minecraft}-${version_nei}:dev"
	
	// use this if ncessary
	 //   compile fileTree(dir: 'libs', include: '*.jar')
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.api.allSource
    classifier = 'sources'
}

// add api classes to main package
jar {
	from sourceSets.api.output
}
